;Output Baklava pattern
push -10    ;stack: n=-10
label 0
  dup       ;stack: n, n
  dup       ;stack: n, n, n
  jumpn 1   ;jump to label 1 if n < 0, stack: n, n
  jump  10  ;stack: n, n (num_spaces)
label 1
  push 0    ;stack: n, n, 0
  swap      ;stack: n, 0, n
  sub       ;stack: n, -n (num_spaces)
label 10
  dup       ;stack: n, num_spaces, num_spaces
  push ' '  ;stack: n, num_spaces, num_spaces, ' '
  call 100  ;Output num_spaces ' '
  pop       ;stack: n, num_spaces, x
  pop       ;stack: n, num_spaces
  dup       ;stack: n, num_spaces, num_spaces
  push 21   ;stack: n, num_spaces, num_spaces, 21
  swap      ;stack: n, num_spaces, 21, num_spaces
  push 2    ;stack: n, num_spaces, 21, num_spaces, 2
  mult      ;stack: n, num_spaces, 21, num_spaces*2
  sub       ;stack: n, num_spaces, num_stars=21-num_spaces*2
  push '*'  ;stack: n, num_spaces, num_stars, '*'
  call 100  ;Output num_spaces '*'
  pop       ;stack: n, num_spaces, x
  pop       ;stack: n, num_spaces
  push '\n' ;stack: n, num_spaces, '\n'
  outc      ;Output newline, stack: n, num_spaces
  pop       ;stack: n
  push 1    ;stack: n, 1
  add       ;stack: n+1
  dup       ;stack: n+1, n+1
  push 11   ;stack: n+1, n+1, 11
  sub       ;stack: n+1, n-10
  jumpz 11  ;jump to label 11 if n==10, stack: n+1
  jump 0
label 11
  pop       ;clean up stack
  end

;Output repeated characters
;stack: num_repeats, char
label 100
  swap      ;stack: char, num_repeats
  push 1    ;char, num_repeats, 1
  sub       ;char, num_repeats-1
  dup       ;char, num_repeats-1, num_repeats-1
  jumpn 101 ;jump to label 101 if num_repeats < 0, stack: char, num_repeats-1
  swap      ;num_repeats-1, char
  dup       ;num_repeats-1, char, char
  outc      ;output char, stack: num_repeats-1, char
  jump 100  ;stack: num_repeats-1, char

label 101
  ret
